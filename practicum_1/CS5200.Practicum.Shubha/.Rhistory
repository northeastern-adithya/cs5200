# Validating column keys
expect_equal(airportsTable$Key, c("PRI", "", "", ""))
# Validating column default values
expect_equal(airportsTable$Default, c(NA, NA, NA, "ZZZ"))
# Validating column extra values
expect_equal(airportsTable$Extra, c("auto_increment", "", "", ""))
# Validating column null values
expect_equal(airportsTable$Null), c("NO", "NO", "NO", "NO"))
# Part 4.g: Validating the table creation
# Function to describe the table
# @param: dbCon - database connection to connect to
describeTable <- function(dbCon, table) {
query <- sprintf("DESCRIBE %s", table)
return (dbGetQuery(dbCon, query))
}
# Function to validate the airports table
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateAirportsTable <- function(dbCon) {
airportsTable <- describeTable(dbCon, airportsTableName)
# Validating column count.
expect_equal(nrow(airportsTable), 4)
# Validating column names
expect_equal(airportsTable$Field,
c("aid", "airportName", "airportState", "airportCode"))
# Validating column types
expect_equal(airportsTable$Type, c("int", "text", "text", "varchar(3)"))
# Validating column keys
expect_equal(airportsTable$Key, c("PRI", "", "", ""))
# Validating column default values
expect_equal(airportsTable$Default, c(NA, NA, NA, "ZZZ"))
# Validating column extra values
expect_equal(airportsTable$Extra, c("auto_increment", "", "", ""))
# Validating column null values
expect_equal(airportsTable$Null, c("NO", "NO", "NO", "NO"))
}
# Function to validate the flight table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateFlightTable <- function(dbCon) {
flightTable <- describeTable(dbCon, flightsTableName)
# Validating column count.
expect_equal(nrow(flightTable), 6)
# Validating column names
expect_equal(
flightTable$Field,
c(
"fid",
"date",
"originAirport",
"airlineName",
"aircraftType",
"isHeavy"
)
)
# Validating column types
expect_equal(flightTable$Type,
c("int", "date", "int", "text", "text", "tinyint(1)"))
# Validating column keys
expect_equal(flightTable$Key, c("PRI", "", "MUL", "", "", ""))
# Validating column default values
expect_equal(all(is.na(flightTable$Default)), TRUE)
# Validating column extra values
expect_equal(flightTable$Extra, c("auto_increment", "", "", "", "", ""))
# Validating column null values
expect_equal(flightTable$Null, c("NO", "NO", "NO", "NO","NO","NO"))
}
# Function to validate the condition table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateConditionTable <- function(dbCon) {
conditionTable <- describeTable(dbCon, conditionsTableName)
expect_equal(nrow(conditionTable), 3)
expect_equal(conditionTable$Field,
c("cid", "sky_condition", "explanation"))
expect_equal(conditionTable$Type, c("int", "text", "text"))
expect_equal(conditionTable$Key, c("PRI", "", ""))
expect_equal(all(is.na(conditionTable$Default)), TRUE)
expect_equal(conditionTable$Extra, c("auto_increment", "", ""))
expect_equal(conditionTable$Null, c("NO", "NO", "NO"))
}
# Function to validate the wildlife size table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateWildLifeSizeTable <- function(dbCon) {
wildlifeSizeTable <- describeTable(dbCon, wildlifeSizeTableName)
expect_equal(nrow(wildlifeSizeTable), 2)
expect_equal(wildlifeSizeTable$Field, c("wlId", "size"))
expect_equal(wildlifeSizeTable$Type, c("int", "text"))
expect_equal(wildlifeSizeTable$Key, c("PRI", ""))
expect_equal(all(is.na(wildlifeSizeTable$Default)), TRUE)
expect_equal(wildlifeSizeTable$Extra, c("auto_increment", ""))
expect_equal(wildlifeSizeTable$Null, c("NO", "NO"))
}
# Function to validate the wildlife.strikes table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateWildlifeStrikesTable <- function(dbCon) {
wildLifeStrikesTable <- describeTable(dbCon, widlifeStrikesTableName)
expect_equal(nrow(wildLifeStrikesTable), 6)
expect_equal(
wildLifeStrikesTable$Field,
c("iid", "fid", "wlsize", "impact", "altitude", "conditions")
)
expect_equal(wildLifeStrikesTable$Type,
c("int", "int", "int", "text", "int", "int"))
expect_equal(wildLifeStrikesTable$Key,
c("PRI", "MUL", "MUL", "", "", "MUL"))
expect_equal(all(is.na(wildLifeStrikesTable$Default)), TRUE)
expect_equal(wildLifeStrikesTable$Extra,
c("auto_increment", "", "", "", "", ""))
expect_equal(wildLifeStrikesTable$Null, c("NO", "NO", "NO", "NO","NO","NO"))
}
# Function to validate the table creation for all tables
# @param: dbCon - database connection to connect to
validateTableCreation <- function(dbCon) {
tryCatch({
print("Starting validations of create table statements for all tables")
validateAirportsTable(dbCon)
validateFlightTable(dbCon)
validateConditionTable(dbCon)
validateWildLifeSizeTable(dbCon)
validateWildlifeStrikesTable(dbCon)
print("Validations of create table statements for all tables successfull")
}, error = function(e) {
print("Error in validating table creations")
print(e)
})
}
validateTableCreation(dbCon)
# Part 3: Connecting to the database
# Function to connect to the database
# @return: database connection
# referredFrom: http://artificium.us/lessons/06.r/l-6-301-sqlite-from-r/l-6-301.html#Connect_to_Database
connectToDatabase <- function() {
# DB credentials
dbName <- "defaultdb"
dbUser <- "avnadmin"
dbPassword <- "AVNS_LfgR_-4_x2xF-vv7_Bg"
dbHost <- "practicum-1-cs-5200.b.aivencloud.com"
dbPort <- 22694
return (
dbConnect(
RMySQL::MySQL(),
user = dbUser,
password = dbPassword,
dbname = dbName,
host = dbHost,
port = dbPort
)
)
}
# Global variable to connect to the database
dbCon <- connectToDatabase()
# Global varaibles defining list of tables used throughout the code.
# Adding double quotes to process dot(.) in table name.
widlifeStrikesTableName <- paste0('"', "wildlife.strikes", '"')
flightsTableName <- 'flights'
airportsTableName <- 'airports'
conditionsTableName <- 'conditions'
wildlifeSizeTableName <- 'wildlifeSize'
updateLog <- 'update_log'
# Part 4.g: Validating the table creation
# Function to describe the table
# @param: dbCon - database connection to connect to
describeTable <- function(dbCon, table) {
query <- sprintf("DESCRIBE %s", table)
return (dbGetQuery(dbCon, query))
}
# Function to validate the airports table
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateAirportsTable <- function(dbCon) {
airportsTable <- describeTable(dbCon, airportsTableName)
# Validating column count.
expect_equal(nrow(airportsTable), 4)
# Validating column names
expect_equal(airportsTable$Field,
c("aid", "airportName", "airportState", "airportCode"))
# Validating column types
expect_equal(airportsTable$Type, c("int", "text", "text", "varchar(3)"))
# Validating column keys
expect_equal(airportsTable$Key, c("PRI", "", "", ""))
# Validating column default values
expect_equal(airportsTable$Default, c(NA, NA, NA, "ZZZ"))
# Validating column extra values
expect_equal(airportsTable$Extra, c("auto_increment", "", "", ""))
# Validating column null values
expect_equal(airportsTable$Null, c("NO", "NO", "NO", "NO"))
}
# Function to validate the flight table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateFlightTable <- function(dbCon) {
flightTable <- describeTable(dbCon, flightsTableName)
# Validating column count.
expect_equal(nrow(flightTable), 6)
# Validating column names
expect_equal(
flightTable$Field,
c(
"fid",
"date",
"originAirport",
"airlineName",
"aircraftType",
"isHeavy"
)
)
# Validating column types
expect_equal(flightTable$Type,
c("int", "date", "int", "text", "text", "tinyint(1)"))
# Validating column keys
expect_equal(flightTable$Key, c("PRI", "", "MUL", "", "", ""))
# Validating column default values
expect_equal(all(is.na(flightTable$Default)), TRUE)
# Validating column extra values
expect_equal(flightTable$Extra, c("auto_increment", "", "", "", "", ""))
# Validating column null values
expect_equal(flightTable$Null, c("NO", "NO", "NO", "NO","NO","NO"))
}
# Function to validate the condition table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateConditionTable <- function(dbCon) {
conditionTable <- describeTable(dbCon, conditionsTableName)
expect_equal(nrow(conditionTable), 3)
expect_equal(conditionTable$Field,
c("cid", "sky_condition", "explanation"))
expect_equal(conditionTable$Type, c("int", "text", "text"))
expect_equal(conditionTable$Key, c("PRI", "", ""))
expect_equal(all(is.na(conditionTable$Default)), TRUE)
expect_equal(conditionTable$Extra, c("auto_increment", "", ""))
expect_equal(conditionTable$Null, c("NO", "NO", "NO"))
}
# Function to validate the wildlife size table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateWildLifeSizeTable <- function(dbCon) {
wildlifeSizeTable <- describeTable(dbCon, wildlifeSizeTableName)
expect_equal(nrow(wildlifeSizeTable), 2)
expect_equal(wildlifeSizeTable$Field, c("wlId", "size"))
expect_equal(wildlifeSizeTable$Type, c("int", "text"))
expect_equal(wildlifeSizeTable$Key, c("PRI", ""))
expect_equal(all(is.na(wildlifeSizeTable$Default)), TRUE)
expect_equal(wildlifeSizeTable$Extra, c("auto_increment", ""))
expect_equal(wildlifeSizeTable$Null, c("NO", "NO"))
}
# Function to validate the wildlife.strikes table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateWildlifeStrikesTable <- function(dbCon) {
wildLifeStrikesTable <- describeTable(dbCon, widlifeStrikesTableName)
expect_equal(nrow(wildLifeStrikesTable), 6)
expect_equal(
wildLifeStrikesTable$Field,
c("iid", "fid", "wlsize", "impact", "altitude", "conditions")
)
expect_equal(wildLifeStrikesTable$Type,
c("int", "int", "int", "text", "int", "int"))
expect_equal(wildLifeStrikesTable$Key,
c("PRI", "MUL", "MUL", "", "", "MUL"))
expect_equal(all(is.na(wildLifeStrikesTable$Default)), TRUE)
expect_equal(wildLifeStrikesTable$Extra,
c("auto_increment", "", "", "", "", ""))
expect_equal(wildLifeStrikesTable$Null, c("NO", "NO", "NO", "NO","NO","NO"))
}
# Function to validate the table creation for all tables
# @param: dbCon - database connection to connect to
validateTableCreation <- function(dbCon) {
tryCatch({
print("Starting validations of create table statements for all tables")
validateAirportsTable(dbCon)
validateFlightTable(dbCon)
validateConditionTable(dbCon)
validateWildLifeSizeTable(dbCon)
validateWildlifeStrikesTable(dbCon)
print("Validations of create table statements for all tables successfull")
}, error = function(e) {
print("Error in validating table creations")
print(e)
})
}
validateTableCreation(dbCon)
#. Part 11: Visualizing trend per year using plot.
# Function to visualize the trend of wildlife strikes per year
# @param: dataFrame - data frame with the number of small, medium and large wildlife strikes per year
visualiseTrendByYear <- function(dataFrame) {
# Converting year to factor since first year statrs from 1000
# but shifts directly to 2000,2002.
# This is done to ensure data is evenly spaced.
# referredFrom: https://stackoverflow.com/questions/69413872/how-to-evenly-space-non-sequential-dates-on-x-axis-in-ggplot
yearsToPlot <- factor(dataFrame$strikeYear)
yearsToPlot <- unique(sort(yearsToPlot))
xPositions <- 1:length(yearsToPlot)
plot(
dataFrame$total,
# to plot lines and points
type = "o",
col = "darkblue",
# to set filled circlers
pch = 19,
# to set line width
lwd = 2,
xlab = "Year",
ylab = "Total Number of Strikes",
main = "Wildlife Strike Incidents by Year",
ylim = c(0, max(dataFrame$total) * 1.3),
# Removing the default x-axis
xaxt = "n"
)
# to add grid lines
# lty = 2 is used to set dashed lines
grid(lty = 2, col = "gray80")
# to (add labels to the points
text(
# x location
yearsToPlot,
# y location
dataFrame$total + 500,
labels = sprintf("(%s,%s)",yearsToPlot,dataFrame$total),
# size of text
cex = 0.8,
col = "darkblue"
)
axis(1, at = xPositions, labels = yearsToPlot)
# Adds a legend to the plot
legend(
"topleft",
legend = "Actual Strikes",
col = "darkblue",
# used to denote a solid line
lty = 1,
# used to denote a filled circle
pch = 19,
bg = "white",
# used to set box width
box.lwd = 1
)
}
result <- strikesByWildlifeSize(dbCon)
# Part 10: Analysis to to find the (total) number of "small", "medium", and "large" wildlife strikes per year.
# Function to get the number of small, medium and large wildlife strikes per year
# @param: dbCon - database connection to connect to
strikesByWildlifeSize <- function(dbCon) {
# Here it is assumed that 1000 means it an unknown year since
# flight year data cannot be 1000.
query <- query <- sprintf(
"
WITH yearlyStrikes AS (
SELECT
YEAR(f.date) as strikeYear,
wl.size,
COUNT(*) as strikeCount
FROM %s ws
JOIN %s f ON ws.fid = f.fid
JOIN %s wl ON ws.wlsize = wl.wlId
GROUP BY YEAR(f.date), wl.size
ORDER BY strikeYear
)
SELECT
strikeYear,
MAX(CASE WHEN size = 'Small' THEN strikeCount ELSE 0 END) as small,
MAX(CASE WHEN size = 'Medium' THEN strikeCount ELSE 0 END) as medium,
MAX(CASE WHEN size = 'Large' THEN strikeCount ELSE 0 END) as large,
MAX(CASE WHEN size = 'Unknown' THEN strikeCount ELSE 0 END) as unknown,
SUM(strikeCount) as total
FROM yearlyStrikes
GROUP BY strikeYear
ORDER BY strikeYear ASC
",
widlifeStrikesTableName,
flightsTableName,
wildlifeSizeTableName
)
return (dbGetQuery(dbCon, query))
}
resultTable <- strikesByWildlifeSize(dbCon)
kable(
resultTable,
format = "html",
col.names = c("Year", "Small", "Medium", "Large", "Unknown", "Total")
) %>%
kable_styling(
# striped is used to get color contrast between rows.
bootstrap_options = c("striped"),
full_width = FALSE,
position = "center"
) %>%
# changing the header row.
row_spec(
0,
bold = TRUE,
color = "white",
background = "#557A95"
)
#. Part 11: Visualizing trend per year using plot.
# Function to visualize the trend of wildlife strikes per year
# @param: dataFrame - data frame with the number of small, medium and large wildlife strikes per year
visualiseTrendByYear <- function(dataFrame) {
# Converting year to factor since first year statrs from 1000
# but shifts directly to 2000,2002.
# This is done to ensure data is evenly spaced.
# referredFrom: https://stackoverflow.com/questions/69413872/how-to-evenly-space-non-sequential-dates-on-x-axis-in-ggplot
yearsToPlot <- factor(dataFrame$strikeYear)
yearsToPlot <- unique(sort(yearsToPlot))
xPositions <- 1:length(yearsToPlot)
plot(
dataFrame$total,
# to plot lines and points
type = "o",
col = "darkblue",
# to set filled circlers
pch = 19,
# to set line width
lwd = 2,
xlab = "Year",
ylab = "Total Number of Strikes",
main = "Wildlife Strike Incidents by Year",
ylim = c(0, max(dataFrame$total) * 1.3),
# Removing the default x-axis
xaxt = "n"
)
# to add grid lines
# lty = 2 is used to set dashed lines
grid(lty = 2, col = "gray80")
# to (add labels to the points
text(
# x location
yearsToPlot,
# y location
dataFrame$total + 500,
labels = sprintf("(%s,%s)",yearsToPlot,dataFrame$total),
# size of text
cex = 0.8,
col = "darkblue"
)
axis(1, at = xPositions, labels = yearsToPlot)
# Adds a legend to the plot
legend(
"topleft",
legend = "Actual Strikes",
col = "darkblue",
# used to denote a solid line
lty = 1,
# used to denote a filled circle
pch = 19,
bg = "white",
# used to set box width
box.lwd = 1
)
}
result <- strikesByWildlifeSize(dbCon)
visualiseTrendByYear(result)
#. Part 11: Visualizing trend per year using plot.
# Function to visualize the trend of wildlife strikes per year
# @param: dataFrame - data frame with the number of small, medium and large wildlife strikes per year
visualiseTrendByYear <- function(dataFrame) {
# Converting year to factor since first year statrs from 1000
# but shifts directly to 2000,2002.
# This is done to ensure data is evenly spaced.
# referredFrom: https://stackoverflow.com/questions/69413872/how-to-evenly-space-non-sequential-dates-on-x-axis-in-ggplot
yearsToPlot <- factor(dataFrame$strikeYear)
yearsToPlot <- unique(sort(yearsToPlot))
xPositions <- 1:length(yearsToPlot)
plot(
dataFrame$total,
# to plot lines and points
type = "o",
col = "darkblue",
# to set filled circlers
pch = 19,
# to set line width
lwd = 2,
xlab = "Year",
ylab = "Total Number of Strikes",
main = "Wildlife Strike Incidents by Year",
ylim = c(0, max(dataFrame$total) * 1.3),
# Removing the default x-axis
xaxt = "n"
)
# to add grid lines
# lty = 2 is used to set dashed lines
grid(lty = 2, col = "gray80")
# to (add labels to the points
text(
# x location
yearsToPlot,
# y location
dataFrame$total + 500,
labels = dataFrame$total,
# size of text
cex = 0.8,
col = "darkblue"
)
axis(1, at = xPositions, labels = yearsToPlot)
# Adds a legend to the plot
legend(
"topleft",
legend = "Actual Strikes",
col = "darkblue",
# used to denote a solid line
lty = 1,
# used to denote a filled circle
pch = 19,
bg = "white",
# used to set box width
box.lwd = 1
)
}
result <- strikesByWildlifeSize(dbCon)
visualiseTrendByYear(result)

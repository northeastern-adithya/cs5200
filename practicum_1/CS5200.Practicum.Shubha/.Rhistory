}
# Function to validate the airports table
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateAirportsTable <- function(dbCon){
airportsTable <- describeTable(dbCon, "airports")
expect_equal(nrow(airportsTable), 4)
expect_equal(airportsTable$Field, c("aid", "airportName", "airportState", "airportCode"))
expect_equal(airportsTable$Type, c("int", "text", "text", "varchar(3)"))
expect_equal(airportsTable$Key, c("PRI", "", "", ""))
expect_equal(airportsTable$Default, c(NA, NA, NA, "ZZZ"))
expect_equal(airportsTable$Extra, c("auto_increment", "", "", ""))
}
# Function to validate the flight table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateFlightTable <- function(dbCon){
flightTable <- describeTable(dbCon, "flights")
expect_equal(nrow(flightTable), 6)
expect_equal(flightTable$Field, c("fid", "date", "originAirport", "airlineName", "aircraftType", "isHeavy"))
expect_equal(flightTable$Type, c("int", "date", "int", "text", "text", "tinyint(1)"))
expect_equal(flightTable$Key, c("PRI", "", "MUL", "", "", ""))
expect_equal(flightTable$Default, c(NA, NA, NA, NA, NA, NA))
expect_equal(flightTable$Extra, c("auto_increment", "", "", "", "", ""))
}
# Function to validate the condition table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateConditionTable <- function(dbCon){
conditionTable <- describeTable(dbCon, "conditions")
expect_equal(nrow(conditionTable), 3)
expect_equal(conditionTable$Field, c("cid", "sky_condition", "explanation"))
expect_equal(conditionTable$Type, c("int", "text", "text"))
expect_equal(conditionTable$Key, c("PRI", "", ""))
expect_equal(conditionTable$Default, c(NA, NA, NA))
expect_equal(conditionTable$Extra, c("auto_increment", "", ""))
}
# Function to validate the wildlife size table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateWildLifeSizeTable <- function(dbCon){
wildlifeSizeTable <- describeTable(dbCon, "wildlifeSize")
expect_equal(nrow(wildlifeSizeTable), 2)
expect_equal(wildlifeSizeTable$Field, c("wlId", "size"))
expect_equal(wildlifeSizeTable$Type, c("int", "text"))
expect_equal(wildlifeSizeTable$Key, c("PRI", ""))
expect_equal(wildlifeSizeTable$Default, c(NA, NA))
expect_equal(wildlifeSizeTable$Extra, c("auto_increment", ""))
}
# Function to validate the incidents table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateIncidentsTable <- function(dbCon){
incidentsTable <- describeTable(dbCon, "incidents")
expect_equal(nrow(incidentsTable), 6)
expect_equal(incidentsTable$Field, c("iid", "fid", "wlsize", "impact", "altitude", "conditions"))
expect_equal(incidentsTable$Type, c("int", "int", "int", "text", "int", "int"))
expect_equal(incidentsTable$Key, c("PRI", "MUL", "MUL", "", "", ""))
expect_equal(incidentsTable$Default, c(NA, NA, NA, NA, NA, NA))
expect_equal(incidentsTable$Extra, c("auto_increment", "", "", "", "", ""))
}
# Function to validate the table creation for all tables
# @param: dbCon - database connection to connect to
validateTableCreation<- function(dbCon){
tryCatch({
print("Starting validations of create table statements for all tables")
validateAirportsTable(dbCon)
validateFlightTable(dbCon)
validateConditionTable(dbCon)
validateWildLifeSizeTable(dbCon)
validateIncidentsTable(dbCon)
print("Validations of create table statements for all tables successfull")
}, error = function(e) {
print("Error in validating airports table")
print(e)
})
}
validateTableCreation(dbCon)
# Function to describe the table
# @param: dbCon - database connection to connect to
describeTable <- function(dbCon, table){
query <- sprintf("DESCRIBE %s", table)
return (dbGetQuery(dbCon, query))
}
# Function to validate the airports table
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateAirportsTable <- function(dbCon){
airportsTable <- describeTable(dbCon, "airports")
expect_equal(nrow(airportsTable), 4)
expect_equal(airportsTable$Field, c("aid", "airportName", "airportState", "airportCode"))
expect_equal(airportsTable$Type, c("int", "text", "text", "varchar(3)"))
expect_equal(airportsTable$Key, c("PRI", "", "", ""))
expect_equal(airportsTable$Default, c(NA, NA, NA, "ZZZ"))
expect_equal(airportsTable$Extra, c("auto_increment", "", "", ""))
}
# Function to validate the flight table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateFlightTable <- function(dbCon){
flightTable <- describeTable(dbCon, "flights")
expect_equal(nrow(flightTable), 6)
expect_equal(flightTable$Field, c("fid", "date", "originAirport", "airlineName", "aircraftType", "isHeavy"))
expect_equal(flightTable$Type, c("int", "date", "int", "text", "text", "tinyint(1)"))
expect_equal(flightTable$Key, c("PRI", "", "MUL", "", "", ""))
print(flightTable$Default)
expect_equal(flightTable$Default, c(NA, NA, NA, NA, NA, NA))
expect_equal(flightTable$Extra, c("auto_increment", "", "", "", "", ""))
}
# Function to validate the condition table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateConditionTable <- function(dbCon){
conditionTable <- describeTable(dbCon, "conditions")
expect_equal(nrow(conditionTable), 3)
expect_equal(conditionTable$Field, c("cid", "sky_condition", "explanation"))
expect_equal(conditionTable$Type, c("int", "text", "text"))
expect_equal(conditionTable$Key, c("PRI", "", ""))
expect_equal(conditionTable$Default, c(NA, NA, NA))
expect_equal(conditionTable$Extra, c("auto_increment", "", ""))
}
# Function to validate the wildlife size table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateWildLifeSizeTable <- function(dbCon){
wildlifeSizeTable <- describeTable(dbCon, "wildlifeSize")
expect_equal(nrow(wildlifeSizeTable), 2)
expect_equal(wildlifeSizeTable$Field, c("wlId", "size"))
expect_equal(wildlifeSizeTable$Type, c("int", "text"))
expect_equal(wildlifeSizeTable$Key, c("PRI", ""))
expect_equal(wildlifeSizeTable$Default, c(NA, NA))
expect_equal(wildlifeSizeTable$Extra, c("auto_increment", ""))
}
# Function to validate the incidents table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateIncidentsTable <- function(dbCon){
incidentsTable <- describeTable(dbCon, "incidents")
expect_equal(nrow(incidentsTable), 6)
expect_equal(incidentsTable$Field, c("iid", "fid", "wlsize", "impact", "altitude", "conditions"))
expect_equal(incidentsTable$Type, c("int", "int", "int", "text", "int", "int"))
expect_equal(incidentsTable$Key, c("PRI", "MUL", "MUL", "", "", ""))
expect_equal(incidentsTable$Default, c(NA, NA, NA, NA, NA, NA))
expect_equal(incidentsTable$Extra, c("auto_increment", "", "", "", "", ""))
}
# Function to validate the table creation for all tables
# @param: dbCon - database connection to connect to
validateTableCreation<- function(dbCon){
tryCatch({
print("Starting validations of create table statements for all tables")
validateAirportsTable(dbCon)
validateFlightTable(dbCon)
validateConditionTable(dbCon)
validateWildLifeSizeTable(dbCon)
validateIncidentsTable(dbCon)
print("Validations of create table statements for all tables successfull")
}, error = function(e) {
print("Error in validating airports table")
print(e)
})
}
validateTableCreation(dbCon)
# Function to describe the table
# @param: dbCon - database connection to connect to
describeTable <- function(dbCon, table){
query <- sprintf("DESCRIBE %s", table)
return (dbGetQuery(dbCon, query))
}
# Function to validate the airports table
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateAirportsTable <- function(dbCon){
airportsTable <- describeTable(dbCon, "airports")
expect_equal(nrow(airportsTable), 4)
expect_equal(airportsTable$Field, c("aid", "airportName", "airportState", "airportCode"))
expect_equal(airportsTable$Type, c("int", "text", "text", "varchar(3)"))
expect_equal(airportsTable$Key, c("PRI", "", "", ""))
expect_equal(airportsTable$Default, c(NA, NA, NA, "ZZZ"))
expect_equal(airportsTable$Extra, c("auto_increment", "", "", ""))
}
# Function to validate the flight table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateFlightTable <- function(dbCon){
flightTable <- describeTable(dbCon, "flights")
expect_equal(nrow(flightTable), 6)
expect_equal(flightTable$Field, c("fid", "date", "originAirport", "airlineName", "aircraftType", "isHeavy"))
expect_equal(flightTable$Type, c("int", "date", "int", "text", "text", "tinyint(1)"))
expect_equal(flightTable$Key, c("PRI", "", "MUL", "", "", ""))
expect_equal(all(is.na(flightTable$Default)), TRUE)
expect_equal(flightTable$Extra, c("auto_increment", "", "", "", "", ""))
}
# Function to validate the condition table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateConditionTable <- function(dbCon){
conditionTable <- describeTable(dbCon, "conditions")
expect_equal(nrow(conditionTable), 3)
expect_equal(conditionTable$Field, c("cid", "sky_condition", "explanation"))
expect_equal(conditionTable$Type, c("int", "text", "text"))
expect_equal(conditionTable$Key, c("PRI", "", ""))
expect_equal(conditionTable$Default, c(NA, NA, NA))
expect_equal(conditionTable$Extra, c("auto_increment", "", ""))
}
# Function to validate the wildlife size table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateWildLifeSizeTable <- function(dbCon){
wildlifeSizeTable <- describeTable(dbCon, "wildlifeSize")
expect_equal(nrow(wildlifeSizeTable), 2)
expect_equal(wildlifeSizeTable$Field, c("wlId", "size"))
expect_equal(wildlifeSizeTable$Type, c("int", "text"))
expect_equal(wildlifeSizeTable$Key, c("PRI", ""))
expect_equal(wildlifeSizeTable$Default, c(NA, NA))
expect_equal(wildlifeSizeTable$Extra, c("auto_increment", ""))
}
# Function to validate the incidents table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateIncidentsTable <- function(dbCon){
incidentsTable <- describeTable(dbCon, "incidents")
expect_equal(nrow(incidentsTable), 6)
expect_equal(incidentsTable$Field, c("iid", "fid", "wlsize", "impact", "altitude", "conditions"))
expect_equal(incidentsTable$Type, c("int", "int", "int", "text", "int", "int"))
expect_equal(incidentsTable$Key, c("PRI", "MUL", "MUL", "", "", ""))
expect_equal(incidentsTable$Default, c(NA, NA, NA, NA, NA, NA))
expect_equal(incidentsTable$Extra, c("auto_increment", "", "", "", "", ""))
}
# Function to validate the table creation for all tables
# @param: dbCon - database connection to connect to
validateTableCreation<- function(dbCon){
tryCatch({
print("Starting validations of create table statements for all tables")
validateAirportsTable(dbCon)
validateFlightTable(dbCon)
validateConditionTable(dbCon)
validateWildLifeSizeTable(dbCon)
validateIncidentsTable(dbCon)
print("Validations of create table statements for all tables successfull")
}, error = function(e) {
print("Error in validating airports table")
print(e)
})
}
validateTableCreation(dbCon)
# Function to describe the table
# @param: dbCon - database connection to connect to
describeTable <- function(dbCon, table){
query <- sprintf("DESCRIBE %s", table)
return (dbGetQuery(dbCon, query))
}
# Function to validate the airports table
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateAirportsTable <- function(dbCon){
airportsTable <- describeTable(dbCon, "airports")
expect_equal(nrow(airportsTable), 4)
expect_equal(airportsTable$Field, c("aid", "airportName", "airportState", "airportCode"))
expect_equal(airportsTable$Type, c("int", "text", "text", "varchar(3)"))
expect_equal(airportsTable$Key, c("PRI", "", "", ""))
expect_equal(airportsTable$Default, c(NA, NA, NA, "ZZZ"))
expect_equal(airportsTable$Extra, c("auto_increment", "", "", ""))
}
# Function to validate the flight table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateFlightTable <- function(dbCon){
flightTable <- describeTable(dbCon, "flights")
expect_equal(nrow(flightTable), 6)
expect_equal(flightTable$Field, c("fid", "date", "originAirport", "airlineName", "aircraftType", "isHeavy"))
expect_equal(flightTable$Type, c("int", "date", "int", "text", "text", "tinyint(1)"))
expect_equal(flightTable$Key, c("PRI", "", "MUL", "", "", ""))
expect_equal(all(is.na(flightTable$Default)), TRUE)
expect_equal(flightTable$Extra, c("auto_increment", "", "", "", "", ""))
}
# Function to validate the condition table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateConditionTable <- function(dbCon){
conditionTable <- describeTable(dbCon, "conditions")
expect_equal(nrow(conditionTable), 3)
expect_equal(conditionTable$Field, c("cid", "sky_condition", "explanation"))
expect_equal(conditionTable$Type, c("int", "text", "text"))
expect_equal(conditionTable$Key, c("PRI", "", ""))
expect_equal(all(is.na(conditionTable$Default)), TRUE)
expect_equal(conditionTable$Extra, c("auto_increment", "", ""))
}
# Function to validate the wildlife size table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateWildLifeSizeTable <- function(dbCon){
wildlifeSizeTable <- describeTable(dbCon, "wildlifeSize")
expect_equal(nrow(wildlifeSizeTable), 2)
expect_equal(wildlifeSizeTable$Field, c("wlId", "size"))
expect_equal(wildlifeSizeTable$Type, c("int", "text"))
expect_equal(wildlifeSizeTable$Key, c("PRI", ""))
expect_equal(all(is.na(wildlifeSizeTable$Default)), TRUE)
expect_equal(wildlifeSizeTable$Extra, c("auto_increment", ""))
}
# Function to validate the incidents table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateIncidentsTable <- function(dbCon){
incidentsTable <- describeTable(dbCon, "incidents")
expect_equal(nrow(incidentsTable), 6)
expect_equal(incidentsTable$Field, c("iid", "fid", "wlsize", "impact", "altitude", "conditions"))
expect_equal(incidentsTable$Type, c("int", "int", "int", "text", "int", "int"))
expect_equal(incidentsTable$Key, c("PRI", "MUL", "MUL", "", "", ""))
expect_equal(all(is.na(incidentsTable$Default)), TRUE)
expect_equal(incidentsTable$Extra, c("auto_increment", "", "", "", "", ""))
}
# Function to validate the table creation for all tables
# @param: dbCon - database connection to connect to
validateTableCreation<- function(dbCon){
tryCatch({
print("Starting validations of create table statements for all tables")
validateAirportsTable(dbCon)
validateFlightTable(dbCon)
validateConditionTable(dbCon)
validateWildLifeSizeTable(dbCon)
validateIncidentsTable(dbCon)
print("Validations of create table statements for all tables successfull")
}, error = function(e) {
print("Error in validating airports table")
print(e)
})
}
validateTableCreation(dbCon)
# Function to describe the table
# @param: dbCon - database connection to connect to
describeTable <- function(dbCon, table){
query <- sprintf("DESCRIBE %s", table)
return (dbGetQuery(dbCon, query))
}
# Function to validate the airports table
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateAirportsTable <- function(dbCon){
airportsTable <- describeTable(dbCon, "airports")
expect_equal(nrow(airportsTable), 4)
expect_equal(airportsTable$Field, c("aid", "airportName", "airportState", "airportCode"))
expect_equal(airportsTable$Type, c("int", "text", "text", "varchar(3)"))
expect_equal(airportsTable$Key, c("PRI", "", "", ""))
expect_equal(airportsTable$Default, c(NA, NA, NA, "ZZZ"))
expect_equal(airportsTable$Extra, c("auto_increment", "", "", ""))
}
# Function to validate the flight table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateFlightTable <- function(dbCon){
flightTable <- describeTable(dbCon, "flights")
expect_equal(nrow(flightTable), 6)
expect_equal(flightTable$Field, c("fid", "date", "originAirport", "airlineName", "aircraftType", "isHeavy"))
expect_equal(flightTable$Type, c("int", "date", "int", "text", "text", "tinyint(1)"))
expect_equal(flightTable$Key, c("PRI", "", "MUL", "", "", ""))
expect_equal(all(is.na(flightTable$Default)), TRUE)
expect_equal(flightTable$Extra, c("auto_increment", "", "", "", "", ""))
}
# Function to validate the condition table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateConditionTable <- function(dbCon){
conditionTable <- describeTable(dbCon, "conditions")
expect_equal(nrow(conditionTable), 3)
expect_equal(conditionTable$Field, c("cid", "sky_condition", "explanation"))
expect_equal(conditionTable$Type, c("int", "text", "text"))
expect_equal(conditionTable$Key, c("PRI", "", ""))
expect_equal(all(is.na(conditionTable$Default)), TRUE)
expect_equal(conditionTable$Extra, c("auto_increment", "", ""))
}
# Function to validate the wildlife size table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateWildLifeSizeTable <- function(dbCon){
wildlifeSizeTable <- describeTable(dbCon, "wildlifeSize")
expect_equal(nrow(wildlifeSizeTable), 2)
expect_equal(wildlifeSizeTable$Field, c("wlId", "size"))
expect_equal(wildlifeSizeTable$Type, c("int", "text"))
expect_equal(wildlifeSizeTable$Key, c("PRI", ""))
expect_equal(all(is.na(wildlifeSizeTable$Default)), TRUE)
expect_equal(wildlifeSizeTable$Extra, c("auto_increment", ""))
}
# Function to validate the incidents table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateIncidentsTable <- function(dbCon){
incidentsTable <- describeTable(dbCon, "incidents")
expect_equal(nrow(incidentsTable), 6)
expect_equal(incidentsTable$Field, c("iid", "fid", "wlsize", "impact", "altitude", "conditions"))
expect_equal(incidentsTable$Type, c("int", "int", "int", "text", "int", "int"))
expect_equal(incidentsTable$Key, c("PRI", "MUL", "MUL", "", "", "MUL"))
expect_equal(all(is.na(incidentsTable$Default)), TRUE)
expect_equal(incidentsTable$Extra, c("auto_increment", "", "", "", "", ""))
}
# Function to validate the table creation for all tables
# @param: dbCon - database connection to connect to
validateTableCreation<- function(dbCon){
tryCatch({
print("Starting validations of create table statements for all tables")
validateAirportsTable(dbCon)
validateFlightTable(dbCon)
validateConditionTable(dbCon)
validateWildLifeSizeTable(dbCon)
validateIncidentsTable(dbCon)
print("Validations of create table statements for all tables successfull")
}, error = function(e) {
print("Error in validating airports table")
print(e)
})
}
validateTableCreation(dbCon)
# Install program required packages
installRequiredPackages <- function() {
packages <- c("RMySQL","DBI","testthat")
# Install packages that are not installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
}
loadRequiredPackages <- function(){
suppressMessages({
library(RMySQL)
library(DBI)
library(testthat)
})
}
installRequiredPackages()
loadRequiredPackages()
# Function to describe the table
# @param: dbCon - database connection to connect to
describeTable <- function(dbCon, table){
query <- sprintf("DESCRIBE %s", table)
return (dbGetQuery(dbCon, query))
}
# Function to validate the airports table
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateAirportsTable <- function(dbCon){
airportsTable <- describeTable(dbCon, "airports")
expect_equal(nrow(airportsTable), 4)
expect_equal(airportsTable$Field, c("aid", "airportName", "airportState", "airportCode"))
expect_equal(airportsTable$Type, c("int", "text", "text", "varchar(3)"))
expect_equal(airportsTable$Key, c("PRI", "", "", ""))
expect_equal(airportsTable$Default, c(NA, NA, NA, "ZZZ"))
expect_equal(airportsTable$Extra, c("auto_increment", "", "", ""))
}
# Function to validate the flight table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateFlightTable <- function(dbCon){
flightTable <- describeTable(dbCon, "flights")
expect_equal(nrow(flightTable), 6)
expect_equal(flightTable$Field, c("fid", "date", "originAirport", "airlineName", "aircraftType", "isHeavy"))
expect_equal(flightTable$Type, c("int", "date", "int", "text", "text", "tinyint(1)"))
expect_equal(flightTable$Key, c("PRI", "", "MUL", "", "", ""))
expect_equal(all(is.na(flightTable$Default)), TRUE)
expect_equal(flightTable$Extra, c("auto_increment", "", "", "", "", ""))
}
# Function to validate the condition table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateConditionTable <- function(dbCon){
conditionTable <- describeTable(dbCon, "conditions")
expect_equal(nrow(conditionTable), 3)
expect_equal(conditionTable$Field, c("cid", "sky_condition", "explanation"))
expect_equal(conditionTable$Type, c("int", "text", "text"))
expect_equal(conditionTable$Key, c("PRI", "", ""))
expect_equal(all(is.na(conditionTable$Default)), TRUE)
expect_equal(conditionTable$Extra, c("auto_increment", "", ""))
}
# Function to validate the wildlife size table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateWildLifeSizeTable <- function(dbCon){
wildlifeSizeTable <- describeTable(dbCon, "wildlifeSize")
expect_equal(nrow(wildlifeSizeTable), 2)
expect_equal(wildlifeSizeTable$Field, c("wlId", "size"))
expect_equal(wildlifeSizeTable$Type, c("int", "text"))
expect_equal(wildlifeSizeTable$Key, c("PRI", ""))
expect_equal(all(is.na(wildlifeSizeTable$Default)), TRUE)
expect_equal(wildlifeSizeTable$Extra, c("auto_increment", ""))
}
# Function to validate the incidents table.
# Validates the columns created by describing the table.
# @param: dbCon - database connection to connect to
validateIncidentsTable <- function(dbCon){
incidentsTable <- describeTable(dbCon, "incidents")
expect_equal(nrow(incidentsTable), 6)
expect_equal(incidentsTable$Field, c("iid", "fid", "wlsize", "impact", "altitude", "conditions"))
expect_equal(incidentsTable$Type, c("int", "int", "int", "text", "int", "int"))
expect_equal(incidentsTable$Key, c("PRI", "MUL", "MUL", "", "", "MUL"))
expect_equal(all(is.na(incidentsTable$Default)), TRUE)
expect_equal(incidentsTable$Extra, c("auto_increment", "", "", "", "", ""))
}
# Function to validate the table creation for all tables
# @param: dbCon - database connection to connect to
validateTableCreation<- function(dbCon){
tryCatch({
print("Starting validations of create table statements for all tables")
validateAirportsTable(dbCon)
validateFlightTable(dbCon)
validateConditionTable(dbCon)
validateWildLifeSizeTable(dbCon)
validateIncidentsTable(dbCon)
print("Validations of create table statements for all tables successfull")
}, error = function(e) {
print("Error in validating airports table")
print(e)
})
}
validateTableCreation(dbCon)

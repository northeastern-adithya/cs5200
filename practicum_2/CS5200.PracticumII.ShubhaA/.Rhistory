return(dataFrame)
}
# Function to extract reps data and insert into reps table
# @param: dbCon - database connection to connect to
# @param: directory - directory to read reps data from
extractRepsData <- function(dbCon, directory) {
batchSize <- 100
repsFile <- list.files(path = directory, pattern = "^pharmaReps.*csv$")
repsData <- data.frame()
for (file in repsFile) {
newRepsData <- read.csv(file.path(directory, file))
repsData <- rbind(repsData, newRepsData)
}
repsData <- cleanUpRepsData(repsData)
insertTerritoryData(dbCon, repsData, batchSize)
insertDataIntoRepsTable(dbCon, repsData, batchSize)
}
# Function to extract sales data and insert into tables
# @param: dbCon - database connection to connect to
# @param: directory - directory to read sales data from
extractSalesData <- function(dbCon, directory) {
salesFile <- list.files(path = directory, pattern = "^pharmaSalesTxn.*csv$")
batchSize <- 100
salesData <- data.frame()
for (file in salesFile) {
newSalesData <- read.csv(file.path(directory, file))
newSalesData$fileName <- file
salesData <- rbind(salesData, newSalesData)
}
salesData <- cleanUpSalesData(salesData)
insertDataIntoCustomersTable(dbCon, salesData, batchSize)
insertDataIntoProductsTable(dbCon, salesData, batchSize)
insertDataIntoSalesTable(dbCon, salesData, batchSize)
}
insertDataIntoSalesPartition <- function(dbCon, salesData, tableName, batchSize) {
if (nrow(salesData) > 0) {
query <- sprintf(
"INSERT INTO %s (date,customerID, productID, qty, repID,data_source) VALUES",
tableName
)
values <- apply(salesData, 1, function(row) {
sprintf("('%s',%s,%s,%s,%s,'%s')",
row["date"],
row["customerID"],
row["productID"],
row["qty"],
row["repID"],
row["data_source"])
})
insertInBatches(dbCon, batchSize, query, values)
}
}
# Partition sales data by year
# @param: dbCon - database connection to connect to
partitionSalesData <- function(dbCon) {
minMaxYear <- getMinMaxYear(dbCon)
minYear <- minMaxYear$minYear
maxYear <- minMaxYear$maxYear
for (year in minYear:maxYear) {
query <- sprintf("SELECT * FROM %s WHERE strftime('%%Y', date) = '%s'",
salesTableName,
year)
salesData <- dbGetQuery(dbCon, query)
tableName <- sprintf("%s_%s", salesTableName, year)
createSalesTable(dbCon, tableName)
insertDataIntoSalesPartition(dbCon, salesData, tableName, 100)
}
dropTableIfExist(dbCon, salesTableName)
}
# Get the min and max year from the sales table
# @param: dbCon - database connection to connect to
getMinMaxYear <- function(dbCon) {
query <- sprintf(
"SELECT MIN(strftime('%%Y', date)) as minYear, MAX(strftime('%%Y', date)) as maxYear FROM %s",
salesTableName
)
return(dbGetQuery(dbCon, query))
}
# Cleans the environment before beginning the execution
# referredFrom:https://northeastern.instructure.com/courses/192346/assignments/2351524
cleanEnv <- function() {
rm(list = ls())
}
# Main function to run the program
main <- function() {
cleanEnv()
installRequiredPackages()
dbCon <- createDBConnection("pharmacy.db")
dropAllExistingTable(dbCon)
dbExecute(dbCon,"PRAGMA foreign_keys = ON")
createAllTables(dbCon)
dataLoc <- "csv-data"
extractRepsData(dbCon, dataLoc)
extractSalesData(dbCon, dataLoc)
partitionSalesData(dbCon)
dbDisconnect(dbCon)
}
# Run the main function
main()
# -------------------------------------------
# title: "Create Star/Snowflake Schema"
# subtitle: CS5200 / Practicum II Part 2
# author: "Shubha, Adithya"
# email: "shubha.a@northeastern.edu"
# date: "Fall 2024"
# --------------------------------------------
# Install program required packages =============================
# Installs RSQLite and DBI to connect to SqlLite.
# Referred from: http://artificium.us/lessons/06.r/l-6-104-r4progs/l-6-104.html#Install_Packages_on_Demand
installRequiredPackages <- function() {
packages <- c("RSQLite", "DBI")
# Install packages that are not installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Load all packages
lapply(packages, library, character.only = TRUE)
}
# Function to connect to the mysql database hosted online
# @return: database connection
# referredFrom: http://artificium.us/lessons/06.r/l-6-301-sqlite-from-r/l-6-301.html#Connect_to_Database
connectToMySqlDatabase <- function() {
# DB credentials
dbName <- "defaultdb"
dbUser <- "avnadmin"
dbPassword <- "AVNS_LfgR_-4_x2xF-vv7_Bg"
dbHost <- "practicum-1-cs-5200.b.aivencloud.com"
dbPort <- 22694
return (
dbConnect(
RMySQL::MySQL(),
user = dbUser,
password = dbPassword,
dbname = dbName,
host = dbHost,
port = dbPort
)
)
}
# All the global variables defined here
productsFactsTable <- "product_facts"
productsDimensionTable <- "product_dimension"
customersDimensionTable <- "customer_dimension"
repsFactsTable <- "reps_facts"
repsDimensionTable <- "reps_dimension"
# Creates a DB connection to local sqlite with the given dbName
# @param: dbName - Name of the db to connect to
# referredFrom: http://artificium.us/lessons/06.r/l-6-301-sqlite-from-r/l-6-301.html#Connect_to_Database
createSQLLiteDBConnection <- function(dbName) {
return(dbConnect(RSQLite::SQLite(), dbName))
}
# drop the given table if it exists.
# @param: table - table to drop
# @param: dbCon - database connection to connect to
dropTableIfExist <- function(dbCon, table) {
dbExecute(dbCon, sprintf("DROP TABLE IF EXISTS %s", table))
}
# Returns the list of all existing tables in the database
# @param: dbCon - database connection to connect to
getAllExistingTables <- function(dbCon) {
return (c(repsFactsTable, repsDimensionTable, productsFactsTable, productsDimensionTable, customersDimensionTable))
}
# Drops all the existing tables of program from a given db connection.
# @param: dbCon - database connection to connect to
dropAllExistingTable <- function(dbCon) {
tables <- getAllExistingTables(dbCon)
for (table in tables) {
dropTableIfExist(dbCon, table)
}
}
# Create the product facts table
# Products fact table is created with the star schema approach with productID and customerID as the foreign keys.
# This is done to reduce data redundancy and make the addition of new dimensions easier for future.
# @param: dbCon - database connection to connect to
createProductFactsTable <- function(dbCon) {
query <- sprintf(
"CREATE TABLE IF NOT EXISTS %s (
productID INT NOT NULL,
customerID INT NOT NULL,
year INT NOT NULL,
month INT NOT NULL,
quarter INT NOT NULL,
totalRevenue DECIMAL(10,2) NOT NULL,
totalUnitsSold INT NOT NULL,
PRIMARY KEY (productID, customerID, year, month),
FOREIGN KEY (productID) REFERENCES %s(productID),
FOREIGN KEY (customerID) REFERENCES %s(customerID)
);",
productsFactsTable,
productsDimensionTable,
customersDimensionTable
)
dbExecute(dbCon, query)
}
# Create products dimension table with product name
# @param: dbCon - database connection to connect to
createProductsDimensionTable <- function(dbCon) {
query <- sprintf(
"CREATE TABLE IF NOT EXISTS %s (
productID INTEGER PRIMARY KEY,
productName VARCHAR(255) NOT NULL
);",
productsDimensionTable
)
dbExecute(dbCon, query)
}
# Create customers dimension table with customer name and country which they come from.
# Adding country allows us to roll up the data based on the country/region/territory.
# @param: dbCon - database connection to connect to
createCustomersDimensionTable <- function(dbCon) {
query <- sprintf(
"CREATE TABLE IF NOT EXISTS %s (
customerID INTEGER PRIMARY KEY,
customerName VARCHAR(255) NOT NULL,
country VARCHAR(255) NOT NULL
);",
customersDimensionTable
)
dbExecute(dbCon, query)
}
# Reps facts table is created using star schema approach with repID as the foreign key
# to the reps dimension table. This is done such a way since reps source table contains 7 columns.
# To make it more scabale with less data redundancy the star schema approach is used.
# @param: dbCon - database connection to connect to
createRepsFactsTable <- function(dbCon) {
query <- sprintf(
"CREATE TABLE IF NOT EXISTS %s (
repID INT NOT NULL,
year INT NOT NULL,
quarter INT NOT NULL,
totalRevenue DECIMAL(10,2) NOT NULL,
averageSalesAmount DECIMAL(10,2) NOT NULL,
PRIMARY KEY (repID, year, quarter),
FOREIGN KEY (repID) REFERENCES %s(repID)
);",
repsFactsTable,
repsDimensionTable
)
dbExecute(dbCon, query)
}
# Create reps dimension table with representative details
# @param: dbCon - database connection to connect to
createRepsDimensionTable <- function(dbCon) {
query <- sprintf(
"CREATE TABLE IF NOT EXISTS %s (
repID INTEGER PRIMARY KEY,
repFN VARCHAR(255) NOT NULL,
repLN VARCHAR(255) NOT NULL
);",
repsDimensionTable
)
dbExecute(dbCon, query)
}
# Function to get names of all tables that start with 'sales_'
# @param: dbCon - database connection to connect to
getSalesTables <- function(dbCon) {
allTables <- dbListTables(dbCon)
salesTables <- grep("^sales_", allTables, value = TRUE)
return(salesTables)
}
# Insert into database in batches
# @param: dbCon - database connection to connect to
# @param: batchSize - batch size to insert into the database
# @param: initialQuery - insert query with table and column names
# @param: values - values to insert into the database
insertInBatches <- function(dbCon, batchSize, initialQuery, values) {
numBatches <- ceiling(length(values) / batchSize)
for (i in 1:numBatches) {
startIdx <- (i - 1) * batchSize + 1
endIdx <- min(i * batchSize, length(values))
batchValues <- values[startIdx:endIdx]
completeQuery <- paste(initialQuery, paste(batchValues, collapse = ","))
dbExecute(dbCon, completeQuery)
}
}
# Insert the required data into the product facts table
# @param: dbCon - database connection to connect to
# @param: data - data to insert into the database
insertIntoProductFactsTable <- function(dbCon, data) {
if (nrow(data) > 0) {
query <- sprintf(
"INSERT INTO %s (productID, customerID, year, month, quarter, totalRevenue,totalUnitsSold) VALUES",
productsFactsTable
)
# referredFrom: https://ademos.people.uic.edu/Chapter4.html
values <- apply(data, 1, function(row) {
sprintf("(%s, %s, %s, %s, %s, %s,%s)",
row["productID"],
row["customerID"],
row["year"],
row["month"],
row["quarter"],
row["totalRevenue"],
row["totalUnitsSold"])
})
insertInBatches(dbCon, 100, query, values)
}
}
# Reads data from the local database to populate the product facts table
# @param: dbCon - database connection to connect to
# @param: tableName - table name to read from
readFromLocalDBToPopulateProductFactsTable <- function(dbCon, tableName) {
query <- sprintf(
"SELECT
s.productID,
s.customerID,
strftime('%%Y', s.date) AS year,
strftime('%%m', s.date) AS month,
CEIL(strftime('%%m', s.date) / 3.0) AS quarter,
SUM(s.qty * p.unitcost) AS totalRevenue,
SUM(s.qty) AS totalUnitsSold
FROM
%s s
JOIN
products p ON s.productID = p.productID
GROUP BY
s.productID,
s.customerID,
year,
month,
quarter",
tableName
)
return(dbGetQuery(dbCon, query))
}
# Reads and inserts data into the product facts table
# Iterates over all the sales tables and reads data from the local database
# to populate the product facts table
# @param: mySqlCon - database connection to connect to mysql
# @param: sqliteCon - database connection to connect to sqlite
readAndInsertForProductFactsTable <- function(mySqlCon, sqliteCon) {
createProductFactsTable(mySqlCon)
salesTables <- getSalesTables(sqliteCon)
for (table in salesTables) {
data <- readFromLocalDBToPopulateProductFactsTable(sqliteCon, table)
insertIntoProductFactsTable(mySqlCon, data)
}
}
# Inserts the data into the products dimension table
# @param: dbCon - database connection to connect to
# @param: data - data to insert into the database
insertIntoProductsDimensionTable <- function(dbCon, data) {
if (nrow(data) > 0) {
query <- sprintf(
"INSERT INTO %s (productID, productName) VALUES",
productsDimensionTable
)
# referredFrom: https://ademos.people.uic.edu/Chapter4.html
values <- apply(data, 1, function(row) {
sprintf("(%s, '%s')", row["productID"], row["productName"])
})
insertInBatches(dbCon, 100, query, values)
}
}
# Reads the data from the local database to populate the products dimension table
# @param: dbCon - database connection to connect to
# @param: tableName - table name to read from
readFromLocalDBToPopulateProductsDimensionTable <- function(dbCon, tableName) {
query <- sprintf("SELECT productID, productName FROM %s;", tableName)
return(dbGetQuery(dbCon, query))
}
# Reads and inserts data into the products dimension table
# @param: mySqlCon - database connection to connect to mysql
# @param: sqliteCon - database connection to connect to sqlite
readAndInsertForProductsDimensionTable <- function(mySqlCon, sqliteCon) {
createProductsDimensionTable(mySqlCon)
data <- readFromLocalDBToPopulateProductsDimensionTable(sqliteCon, "products")
insertIntoProductsDimensionTable(mySqlCon, data)
}
# Inserts the data into the customers dimension table
# @param: dbCon - database connection to connect to
# @param: data - data to insert into the database
insertIntoCustomersDimensionTable <- function(dbCon, data) {
if (nrow(data) > 0) {
query <- sprintf(
"INSERT INTO %s (customerID,customerName ,country) VALUES",
customersDimensionTable
)
# referredFrom: https://ademos.people.uic.edu/Chapter4.html
values <- apply(data, 1, function(row) {
sprintf("(%s,'%s' ,'%s')", row["customerID"], row["customerName"],row["country"])
})
insertInBatches(dbCon, 100, query, values)
}
}
# Reads the data from the local database to populate the customers dimension table
# @param: dbCon - database connection to connect to
# @param: tableName - table name to read from
readFromLocalDBToPopulateCustomersDimensionTable <- function(dbCon, tableName) {
query <- sprintf("SELECT customerID, customerName,country FROM %s;", tableName)
return(dbGetQuery(dbCon, query))
}
# Reads and inserts data into the customers dimension table
# @param: mySqlCon - database connection to connect to mysql
# @param: sqliteCon - database connection to connect to sqlite
readAndInsertForCustomersDimensionTable <- function(mySqlCon, sqliteCon) {
createCustomersDimensionTable(mySqlCon)
data <- readFromLocalDBToPopulateCustomersDimensionTable(sqliteCon, "customers")
insertIntoCustomersDimensionTable(mySqlCon, data)
}
# Reads the data from the local database to populate the reps facts table
# @param: dbCon - database connection to connect to
# @param: tableName - table name to read from
readFromLocalDBToPopulateRepsFactsTable <- function(dbCon, tableName) {
query <- sprintf(
"SELECT
r.repId,
strftime('%%Y', s.date) AS year,
CEIL(strftime('%%m', s.date) / 3.0) AS quarter,
SUM(s.qty * p.unitcost) AS totalRevenue,
AVG(s.qty * p.unitcost) AS averageSalesAmount
FROM
%s s
JOIN
reps r ON s.repId = r.repId
JOIN
products p ON s.productId = p.productId
GROUP BY
r.repId,
year,
quarter",
tableName
)
return (dbGetQuery(dbCon, query))
}
# Inserts the data into the reps facts table
# @param: dbCon - database connection to connect to
# @param: data - data to insert into the database
insertIntoRepsFactsTable <- function(dbCon, data) {
if (nrow(data) > 0) {
query <- sprintf(
"INSERT INTO %s (repID, year, quarter, totalRevenue, averageSalesAmount) VALUES",
repsFactsTable
)
# referredFrom: https://ademos.people.uic.edu/Chapter4.html
values <- apply(data, 1, function(row) {
sprintf("(%s, %s, %s, %s, %s)", row["repID"], row["year"], row["quarter"], row["totalRevenue"], row["averageSalesAmount"])
})
insertInBatches(dbCon, 100, query, values)
}
}
# Reads and inserts data into the reps facts table
# Iterates over all the sales tables and reads data from the local database
# to populate the reps facts table
# @param: mySqlCon - database connection to connect to mysql
# @param: sqliteCon - database connection to connect to sqlite
readAndInsertForRepsFactsTable <- function(mySqlCon, sqliteCon) {
createRepsFactsTable(mySqlCon)
salesTables <- getSalesTables(sqliteCon)
for (table in salesTables) {
data <- readFromLocalDBToPopulateRepsFactsTable(sqliteCon, table)
insertIntoRepsFactsTable(mySqlCon, data)
}
}
# Reads the data from the local database to populate the reps dimension table
# @param: dbCon - database connection to connect to
# @param: tableName - table name to read from
readFromLocalDBToPopulateRepsDimensionTable <- function(dbCon, tableName) {
query <- sprintf("SELECT repID, repFN, repLN
FROM %s;",
tableName)
return(dbGetQuery(dbCon, query))
}
# Inserts the data into the reps dimension table
# @param: dbCon - database connection to connect to
insertIntoRepsDimensionTable <- function(dbCon, data) {
if (nrow(data) > 0) {
query <- sprintf(
"INSERT INTO %s (repID, repFN, repLN) VALUES",
repsDimensionTable
)
# referredFrom: https://ademos.people.uic.edu/Chapter4.html
values <- apply(data, 1, function(row) {
sprintf("(%s, '%s', '%s')",
row["repID"],
row["repFN"],
row["repLN"])
})
insertInBatches(dbCon, 100, query, values)
}
}
# Reads and inserts data into the reps dimension table
# @param: mySqlCon - database connection to connect to mysql
# @param: sqliteCon - database connection to connect to sqlite
readAndInsertForRepsDimensionTable <- function(mySqlCon, sqliteCon) {
createRepsDimensionTable(mySqlCon)
data <- readFromLocalDBToPopulateRepsDimensionTable(sqliteCon, "reps")
insertIntoRepsDimensionTable(mySqlCon, data)
}
# Cleans the environment before beginning the execution
# referredFrom:https://northeastern.instructure.com/courses/192346/assignments/2351524
cleanEnv <- function() {
rm(list = ls())
}
# Main function to run the program
main <- function() {
installRequiredPackages()
cleanEnv()
mySqlCon <- connectToMySqlDatabase()
sqliteCon <- createSQLLiteDBConnection("pharmacy.db")
dropAllExistingTable(mySqlCon)
readAndInsertForProductsDimensionTable(mySqlCon, sqliteCon)
readAndInsertForCustomersDimensionTable(mySqlCon, sqliteCon)
readAndInsertForProductFactsTable(mySqlCon, sqliteCon)
readAndInsertForRepsDimensionTable(mySqlCon, sqliteCon)
readAndInsertForRepsFactsTable(mySqlCon, sqliteCon)
dbDisconnect(mySqlCon)
dbDisconnect(sqliteCon)
}
# Run the main function
main()

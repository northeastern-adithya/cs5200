install.packages(packages[!installed_packages])
}
}
# Loads the required packages to the environment
# Loads RMysql, DBI,kableExtra and testthat packages
loadRequiredPackages <- function() {
suppressMessages({
library(RSQLite)
})
}
installRequiredPackages()
loadRequiredPackages()
# Connects to the database
connectToDatabase <- function(dbName) {
return (dbConnect(RSQLite::SQLite(), dbname = dbName))
}
dbCon <- connectToDatabase("sakila.db")
queryToRemoveUserDefinedIndexes <- function(indexName) {
return (sprintf("DROP INDEX IF EXISTS %s", indexName))
}
getAllUserDefinedIndexes <- function(dbCon) {
return (dbExecute(dbCon, "SELECT name FROM sqlite_master WHERE type='index'"))
}
removeUserDefinedIndexes <- function(dbCon) {
indexes <- getAllUserDefinedIndexes(dbCon)
for (index in indexes) {
print(index)
if (!grepl("sqlite_autoindex", index)) {
print(index)
dbExecute(dbCon, queryToRemoveUserDefinedIndexes(index))
}
}
}
removeUserDefinedIndexes(dbCon)
# Cleans the environment before beginning the execution
# referredFrom:https://northeastern.instructure.com/courses/192346/assignments/2351524
rm(list = ls())
# Install program required packages
# Installs RMysql, DBI and testthat,kableExtra,jsonlite packages
# referredFrom: http://artificium.us/lessons/06.r/l-6-104-r4progs/l-6-104.html#Install_Packages_on_Demand
installRequiredPackages <- function() {
packages <- c("RSQLite","DBI")
# Install packages that are not installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
}
# Loads the required packages to the environment
# Loads RMysql, DBI,kableExtra and testthat packages
loadRequiredPackages <- function() {
suppressMessages({
library(RSQLite)
library(DBI)
})
}
installRequiredPackages()
loadRequiredPackages()
# Connects to the database
connectToDatabase <- function(dbName) {
return (dbConnect(RSQLite::SQLite(), dbname = dbName))
}
dbCon <- connectToDatabase("sakila.db")
queryToRemoveUserDefinedIndexes <- function(indexName) {
return (sprintf("DROP INDEX IF EXISTS %s", indexName))
}
getAllUserDefinedIndexes <- function(dbCon) {
return (dbGetQuery(dbCon, "SELECT name FROM sqlite_master WHERE type='index'"))
}
removeUserDefinedIndexes <- function(dbCon) {
indexes <- getAllUserDefinedIndexes(dbCon)
for (index in indexes$name) {
print(index)
if (!grepl("sqlite_autoindex", index)) {
print(index)
dbExecute(dbCon, queryToRemoveUserDefinedIndexes(index))
}
}
}
removeUserDefinedIndexes(dbCon)
queryToRemoveUserDefinedIndexes <- function(indexName) {
return (sprintf("DROP INDEX IF EXISTS %s", indexName))
}
getAllUserDefinedIndexes <- function(dbCon) {
return (dbGetQuery(dbCon, "SELECT name FROM sqlite_master WHERE type='index'"))
}
removeUserDefinedIndexes <- function(dbCon) {
indexes <- getAllUserDefinedIndexes(dbCon)
for (index in indexes$name) {
if (!grepl("sqlite_autoindex", index)) {
dbExecute(dbCon, queryToRemoveUserDefinedIndexes(index))
}
}
}
queryToGetFilmCountPerCategory <- function() {
return ("SELECT C.name as category_name, count(F.film_id) as film_count
FROM film as F
JOIN film_category as FC
JOIN category as C
GROUP BY C.name")
}
getFilmCountPerCategory <- function(dbCon) {
return (dbGetQuery(dbCon, queryToGetFilmCountPerCategory()))
}
displayFilmCountPerCategory <- function(dbCon) {
result <- getFilmCountPerCategory(dbCon)
# referredFrom: https://www.rdocumentation.org/packages/knitr/versions/1.48/topics/kable
kable(
result,
format = "html",
col.names = c("Category Name", "Film Count")
) %>%
# referredFrom: https://www.rdocumentation.org/packages/kableExtra/versions/1.4.0/topics/kable_styling
kable_styling(
# striped is used to get color contrast between rows.
bootstrap_options = c("striped"),
full_width = FALSE,
position = "center"
) %>%
# changing the header row.
row_spec(
0,
bold = TRUE,
color = "white",
background = "#557A95"
)
}
removeUserDefinedIndexes(dbCon)
displayFilmCountPerCategory(dbCon)
# Cleans the environment before beginning the execution
# referredFrom:https://northeastern.instructure.com/courses/192346/assignments/2351524
rm(list = ls())
# Install program required packages
# Installs RMysql, DBI and testthat,kableExtra,jsonlite packages
# referredFrom: http://artificium.us/lessons/06.r/l-6-104-r4progs/l-6-104.html#Install_Packages_on_Demand
installRequiredPackages <- function() {
packages <- c("RSQLite","DBI","kableExtra")
# Install packages that are not installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
}
# Loads the required packages to the environment
# Loads RMysql, DBI,kableExtra and testthat packages
loadRequiredPackages <- function() {
suppressMessages({
library(RSQLite)
library(DBI)
library(kableExtra)
})
}
installRequiredPackages()
loadRequiredPackages()
# Connects to the database
connectToDatabase <- function(dbName) {
return (dbConnect(RSQLite::SQLite(), dbname = dbName))
}
dbCon <- connectToDatabase("sakila.db")
queryToRemoveUserDefinedIndexes <- function(indexName) {
return (sprintf("DROP INDEX IF EXISTS %s", indexName))
}
getAllUserDefinedIndexes <- function(dbCon) {
return (dbGetQuery(dbCon, "SELECT name FROM sqlite_master WHERE type='index'"))
}
removeUserDefinedIndexes <- function(dbCon) {
indexes <- getAllUserDefinedIndexes(dbCon)
for (index in indexes$name) {
if (!grepl("sqlite_autoindex", index)) {
dbExecute(dbCon, queryToRemoveUserDefinedIndexes(index))
}
}
}
queryToGetFilmCountPerCategory <- function() {
return ("SELECT C.name as category_name, count(F.film_id) as film_count
FROM film as F
JOIN film_category as FC
JOIN category as C
GROUP BY C.name")
}
getFilmCountPerCategory <- function(dbCon) {
return (dbGetQuery(dbCon, queryToGetFilmCountPerCategory()))
}
displayFilmCountPerCategory <- function(dbCon) {
result <- getFilmCountPerCategory(dbCon)
# referredFrom: https://www.rdocumentation.org/packages/knitr/versions/1.48/topics/kable
kable(
result,
format = "html",
col.names = c("Category Name", "Film Count")
) %>%
# referredFrom: https://www.rdocumentation.org/packages/kableExtra/versions/1.4.0/topics/kable_styling
kable_styling(
# striped is used to get color contrast between rows.
bootstrap_options = c("striped"),
full_width = FALSE,
position = "center"
) %>%
# changing the header row.
row_spec(
0,
bold = TRUE,
color = "white",
background = "#557A95"
)
}
removeUserDefinedIndexes(dbCon)
displayFilmCountPerCategory(dbCon)
queryToRemoveUserDefinedIndexes <- function(indexName) {
return (sprintf("DROP INDEX IF EXISTS %s", indexName))
}
getAllUserDefinedIndexes <- function(dbCon) {
return (dbGetQuery(dbCon, "SELECT name FROM sqlite_master WHERE type='index'"))
}
removeUserDefinedIndexes <- function(dbCon) {
indexes <- getAllUserDefinedIndexes(dbCon)
for (index in indexes$name) {
if (!grepl("sqlite_autoindex", index)) {
dbExecute(dbCon, queryToRemoveUserDefinedIndexes(index))
}
}
}
queryToGetFilmCountPerCategory <- function() {
return ("SELECT C.name as category_name, count(F.film_id) as film_count
FROM film as F
JOIN film_category as FC
JOIN category as C
GROUP BY C.name")
}
getFilmCountPerCategory <- function(dbCon) {
return (dbGetQuery(dbCon, queryToGetFilmCountPerCategory()))
}
displayFilmCountPerCategory <- function(dbCon) {
result <- getFilmCountPerCategory(dbCon)
# referredFrom: https://www.rdocumentation.org/packages/knitr/versions/1.48/topics/kable
kable(
result,
format = "html",
col.names = c("Category Name", "Film Count")
) %>%
# referredFrom: https://www.rdocumentation.org/packages/kableExtra/versions/1.4.0/topics/kable_styling
kable_styling(
# striped is used to get color contrast between rows.
bootstrap_options = c("striped"),
full_width = TRUE,
position = "center"
) %>%
# changing the header row.
row_spec(
0,
bold = TRUE,
color = "white",
background = "#557A95"
)
}
removeUserDefinedIndexes(dbCon)
displayFilmCountPerCategory(dbCon)
queryToRemoveUserDefinedIndexes <- function(indexName) {
return (sprintf("DROP INDEX IF EXISTS %s", indexName))
}
getAllUserDefinedIndexes <- function(dbCon) {
return (dbGetQuery(dbCon, "SELECT name FROM sqlite_master WHERE type='index'"))
}
removeUserDefinedIndexes <- function(dbCon) {
indexes <- getAllUserDefinedIndexes(dbCon)
for (index in indexes$name) {
if (!grepl("sqlite_autoindex", index)) {
dbExecute(dbCon, queryToRemoveUserDefinedIndexes(index))
}
}
}
queryToGetFilmCountPerCategory <- function() {
return ("SELECT C.name as category_name, count(F.film_id) as film_count
FROM film as F
JOIN film_category as FC
JOIN category as C
GROUP BY C.name")
}
getFilmCountPerCategory <- function(dbCon) {
result <- dbGetQuery(dbCon, queryToGetFilmCountPerCategory())
result$film_count <- format(result$film_count, scientific = FALSE, big.mark = ",")
return (result)
}
displayFilmCountPerCategory <- function(dbCon) {
result <- getFilmCountPerCategory(dbCon)
print(result)
# referredFrom: https://www.rdocumentation.org/packages/knitr/versions/1.48/topics/kable
kable(
result,
format = "html",
col.names = c("Category Name", "Film Count")
) %>%
# referredFrom: https://www.rdocumentation.org/packages/kableExtra/versions/1.4.0/topics/kable_styling
kable_styling(
# striped is used to get color contrast between rows.
bootstrap_options = c("striped"),
full_width = TRUE,
position = "center"
) %>%
# changing the header row.
row_spec(
0,
bold = TRUE,
color = "white",
background = "#557A95"
)
}
removeUserDefinedIndexes(dbCon)
displayFilmCountPerCategory(dbCon)
# Cleans the environment before beginning the execution
# referredFrom:https://northeastern.instructure.com/courses/192346/assignments/2351524
rm(list = ls())
# Install program required packages
# Installs RSQLite, DBI,kableExtra  packages
# referredFrom: http://artificium.us/lessons/06.r/l-6-104-r4progs/l-6-104.html#Install_Packages_on_Demand
installRequiredPackages <- function() {
packages <- c("RSQLite","DBI","kableExtra","testthat")
# Install packages that are not installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
}
# Loads the required packages to the environment
# Loads RSQLite, DBI,kableExtra packages
loadRequiredPackages <- function() {
suppressMessages({
library(RSQLite)
library(DBI)
library(kableExtra)
library(testthat)
})
}
installRequiredPackages()
loadRequiredPackages()
# Connects to the database
connectToDatabase <- function(dbName) {
return (dbConnect(RSQLite::SQLite(), dbname = dbName))
}
ensureDatabaseConnection <- function(dbCon) {
result <- dbGetQuery(dbCon, "SELECT * FROM film LIMIT 1")
test_that("Result size is 1", {
expect_equal(nrow(result), 1)
})
}
dbCon <- connectToDatabase("sakila.db")
ensureDatabaseConnection(dbCon)
queryToRemoveUserDefinedIndexes <- function(indexName) {
return (sprintf("DROP INDEX IF EXISTS %s", indexName))
}
getAllUserDefinedIndexes <- function(dbCon) {
return (dbGetQuery(dbCon, "SELECT name FROM sqlite_master WHERE type='index'"))
}
removeUserDefinedIndexes <- function(dbCon) {
indexes <- getAllUserDefinedIndexes(dbCon)
for (index in indexes$name) {
if (!grepl("sqlite_autoindex", index)) {
dbExecute(dbCon, queryToRemoveUserDefinedIndexes(index))
}
}
}
queryToGetFilmCountPerCategory <- function() {
return ("SELECT C.name as category_name, count(F.film_id) as film_count
FROM film as F
JOIN film_category as FC
JOIN category as C
GROUP BY C.name")
}
getFilmCountPerCategory <- function(dbCon) {
result <- dbGetQuery(dbCon, queryToGetFilmCountPerCategory())
result$film_count <- format(result$film_count, scientific = FALSE, big.mark = ",")
return (result)
}
displayFilmCountPerCategory <- function(dbCon) {
result <- getFilmCountPerCategory(dbCon)
# referredFrom: https://www.rdocumentation.org/packages/knitr/versions/1.48/topics/kable
kable(
result,
format = "html",
col.names = c("Category Name", "Film Count")
) %>%
# referredFrom: https://www.rdocumentation.org/packages/kableExtra/versions/1.4.0/topics/kable_styling
kable_styling(
# striped is used to get color contrast between rows.
bootstrap_options = c("striped"),
full_width = TRUE,
position = "center"
) %>%
# changing the header row.
row_spec(
0,
bold = TRUE,
color = "white",
background = "#557A95"
)
}
removeUserDefinedIndexes(dbCon)
displayFilmCountPerCategory(dbCon)
# Cleans the environment before beginning the execution
# referredFrom:https://northeastern.instructure.com/courses/192346/assignments/2351524
rm(list = ls())
# Install program required packages
# Installs RSQLite, DBI,kableExtra  packages
# referredFrom: http://artificium.us/lessons/06.r/l-6-104-r4progs/l-6-104.html#Install_Packages_on_Demand
installRequiredPackages <- function() {
packages <- c("RSQLite","DBI","kableExtra","testthat")
# Install packages that are not installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
}
# Loads the required packages to the environment
# Loads RSQLite, DBI,kableExtra packages
loadRequiredPackages <- function() {
suppressMessages({
library(RSQLite)
library(DBI)
library(kableExtra)
library(testthat)
})
}
installRequiredPackages()
loadRequiredPackages()
# Connects to the database
connectToDatabase <- function(dbName) {
return (dbConnect(RSQLite::SQLite(), dbname = dbName))
}
ensureDatabaseConnection <- function(dbCon) {
result <- dbGetQuery(dbCon, "SELECT * FROM film LIMIT 1")
suppressMessages(test_that("Result size is 1", {
expect_equal(nrow(result), 1)
}))
}
dbCon <- connectToDatabase("sakila.db")
ensureDatabaseConnection(dbCon)
queryToRemoveUserDefinedIndexes <- function(indexName) {
return (sprintf("DROP INDEX IF EXISTS %s", indexName))
}
getAllUserDefinedIndexes <- function(dbCon) {
return (dbGetQuery(dbCon, "SELECT name FROM sqlite_master WHERE type='index'"))
}
removeUserDefinedIndexes <- function(dbCon) {
indexes <- getAllUserDefinedIndexes(dbCon)
for (index in indexes$name) {
if (!grepl("sqlite_autoindex", index)) {
dbExecute(dbCon, queryToRemoveUserDefinedIndexes(index))
}
}
}
queryToGetFilmCountPerCategory <- function() {
return ("SELECT C.name as category_name, count(F.film_id) as film_count
FROM film as F
JOIN film_category as FC
JOIN category as C
GROUP BY C.name")
}
getFilmCountPerCategory <- function(dbCon) {
result <- dbGetQuery(dbCon, queryToGetFilmCountPerCategory())
result$film_count <- format(result$film_count, scientific = FALSE, big.mark = ",")
return (result)
}
displayFilmCountPerCategory <- function(dbCon) {
result <- getFilmCountPerCategory(dbCon)
# referredFrom: https://www.rdocumentation.org/packages/knitr/versions/1.48/topics/kable
kable(
result,
format = "html",
col.names = c("Category Name", "Film Count")
) %>%
# referredFrom: https://www.rdocumentation.org/packages/kableExtra/versions/1.4.0/topics/kable_styling
kable_styling(
# striped is used to get color contrast between rows.
bootstrap_options = c("striped"),
full_width = TRUE,
position = "center"
) %>%
# changing the header row.
row_spec(
0,
bold = TRUE,
color = "white",
background = "#557A95"
)
}
removeUserDefinedIndexes(dbCon)
displayFilmCountPerCategory(dbCon)
getQueryPlan <- function(dbCon,query){
return(dbGetQuery(dbCon, sprintf("EXPLAIN QUERY PLAN %s", query)))
}
displayQueryPlan <- function(dbCon,query){
result <- getQueryPlan(dbCon,query)
# referredFrom: https://www.rdocumentation.org/packages/knitr/versions/1.48/topics/kable
kable(result$detail,
format = "html",
col.names = c("Detail")) %>%
# referredFrom: https://www.rdocumentation.org/packages/kableExtra/versions/1.4.0/topics/kable_styling
kable_styling(
# striped is used to get color contrast between rows.
bootstrap_options = c("striped"),
full_width = TRUE,
position = "center"
) %>%
# changing the header row.
row_spec(
0,
bold = TRUE,
color = "white",
background = "#557A95"
)
}
displayQueryPlan(dbCon,queryToGetFilmCountPerCategory())

# Query to get the film count per category
queryToGetFilmCountPerCategory <- function() {
return (
"SELECT C.name as category_name, count(F.film_id) as film_count
FROM film as F
JOIN film_category as FC
JOIN category as C
GROUP BY C.name"
)
}
# Gets the film count per category
# @param dbCon: Database connection object
getFilmCountPerCategory <- function(dbCon) {
result <- dbGetQuery(dbCon, queryToGetFilmCountPerCategory())
# Formatting the film count to have a readable format
result$film_count <- format(result$film_count,
scientific = FALSE,
big.mark = ",")
return (result)
}
# Displays the film count per category
# @param dbCon: Database connection object
displayFilmCountPerCategory <- function(dbCon) {
result <- getFilmCountPerCategory(dbCon)
# referredFrom: https://www.rdocumentation.org/packages/knitr/versions/1.48/topics/kable
kable(result,
format = "html",
col.names = c("Category Name", "Film Count")) %>%
# referredFrom: https://www.rdocumentation.org/packages/kableExtra/versions/1.4.0/topics/kable_styling
kable_styling(
# striped is used to get color contrast between rows.
bootstrap_options = c("striped"),
full_width = TRUE,
position = "center"
) %>%
# changing the header row.
row_spec(
0,
bold = TRUE,
color = "white",
background = "#557A95"
)
}
removeUserDefinedIndexes(dbCon)
displayFilmCountPerCategory(dbCon)
# Gives the query plan for the given query
# @param dbCon: Database connection object
# @param query: Query for which the plan is required
getQueryPlan <- function(dbCon,query){
return(dbGetQuery(dbCon, sprintf("EXPLAIN QUERY PLAN %s", query)))
}
# Displays the query plan for the given query
# Displays only the detail, other information can be added is required
# @param dbCon: Database connection object
# @param query: Query for which the plan is required
displayQueryPlan <- function(dbCon,query){
result <- getQueryPlan(dbCon,query)
# referredFrom: https://www.rdocumentation.org/packages/knitr/versions/1.48/topics/kable
kable(result$detail,
format = "html",
col.names = c("Detail")) %>%
# referredFrom: https://www.rdocumentation.org/packages/kableExtra/versions/1.4.0/topics/kable_styling
kable_styling(
# striped is used to get color contrast between rows.
bootstrap_options = c("striped"),
full_width = TRUE,
position = "center"
) %>%
# changing the header row.
row_spec(
0,
bold = TRUE,
color = "white",
background = "#557A95"
)
}
displayQueryPlan(dbCon,queryToGetFilmCountPerCategory())
# Query to get title,length, rental_rate, release_year of Zorro Ark film
queryToGetInformationOnZorroArk <- function() {
return (
"SELECT  title,length,rental_rate,release_year FROM film
where title = 'ZORRO ARK'")
}
getInformationOnZorroArk <- function(dbCon) {
return (dbGetQuery(dbCon, queryToGetInformationOnZorroArk()))
}
# Displays information on Zorro Ark film
# @param dbCon: Database connection object
# @param result: Result of the query
displayInformationOnFilm <- function(dbCon,result) {
# referredFrom: https://www.rdocumentation.org/packages/knitr/versions/1.48/topics/kable
kable(result,
format = "html",
col.names = c("Title", "Length", "Rental Rate", "Release Year")) %>%
# referredFrom: https://www.rdocumentation.org/packages/kableExtra/versions/1.4.0/topics/kable_styling
kable_styling(
# striped is used to get color contrast between rows.
bootstrap_options = c("striped"),
full_width = TRUE,
position = "center"
) %>%
# changing the header row.
row_spec(
0,
bold = TRUE,
color = "white",
background = "#557A95"
)
}
queryStartTime <- Sys.time()
informationOnZorroArk <- getInformationOnZorroArk(dbCon)
queryEndTime <- Sys.time()
timeToFetchInformationOnZorroArk <- queryEndTime - queryStartTime
displayInformationOnFilm(dbCon,informationOnZorroArk)
# display query plan on information of Zorro Ark
displayQueryPlan(dbCon,queryToGetInformationOnZorroArk())
# Query to create index on title column
queryToCreateIndexOnTitle <- function() {
return ("CREATE INDEX IF NOT EXISTS TitleIndex
ON film (title);")
}
createIndexOnTitle <- function(dbCon) {
invisible(dbExecute(dbCon, queryToCreateIndexOnTitle()))
}
createIndexOnTitle(dbCon)
startTime <- Sys.time()
informationOnZorroArk <- getInformationOnZorroArk(dbCon)
endTime <- Sys.time()
timeToFetchInformationOnZorroArkAfterIndex <- queryEndTime - queryStartTime
displayInformationOnFilm(dbCon,informationOnZorroArk)
displayQueryPlan(dbCon,queryToGetInformationOnZorroArk())
tinytex::install_tinytex()
# Cleans the environment before beginning the execution
# referredFrom:https://northeastern.instructure.com/courses/192346/assignments/2351524
rm(list = ls())
# Install program required packages
# Installs RSQLite, DBI  packages
# referredFrom: http://artificium.us/lessons/06.r/l-6-104-r4progs/l-6-104.html#Install_Packages_on_Demand
installRequiredPackages <- function() {
packages <- c("RSQLite", "DBI", "testthat")
# Install packages that are not installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
}
# Loads the required packages to the environment
# Loads RSQLite, DBI packages
loadRequiredPackages <- function() {
suppressMessages({
library(RSQLite)
library(DBI)
library(testthat)
})
}
installRequiredPackages()
loadRequiredPackages()
# Cleans the environment before beginning the execution
# referredFrom:https://northeastern.instructure.com/courses/192346/assignments/2351524
rm(list = ls())
# Install program required packages
# Installs RSQLite, DBI  packages
# referredFrom: http://artificium.us/lessons/06.r/l-6-104-r4progs/l-6-104.html#Install_Packages_on_Demand
installRequiredPackages <- function() {
packages <- c("RSQLite", "DBI", "testthat")
# Install packages that are not installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
}
# Loads the required packages to the environment
# Loads RSQLite, DBI packages
loadRequiredPackages <- function() {
suppressMessages({
library(RSQLite)
library(DBI)
library(testthat)
})
}
installRequiredPackages()
loadRequiredPackages()
# Connects to the database
# referredFrom: http://artificium.us/lessons/06.r/l-6-301-sqlite-from-r/l-6-301.html#Connect_to_Database
# @param dbName: Name of the database to connect to
connectToDatabase <- function(dbName) {
return (dbConnect(RSQLite::SQLite(), dbname = dbName))
}
# Ensures the database connection is established
# by running a test query and asserting on the result.
# @param dbCon: Database connection object
ensureDatabaseConnection <- function(dbCon) {
result <- dbGetQuery(dbCon, "SELECT * FROM film LIMIT 1")
test_that("Result size is 1", {
expect_equal(nrow(result), 1)
})
}
# Function to clear databse cache to checking working of indexes
# @param dbCon: Database connection object
clearDatabaseCache <- function(dbCon) {
# Free up cache memory in SQLite
# referredFrom: https://stackoverflow.com/questions/4123196/sqlite-abnormal-memory-usage
dbExecute(dbCon, "PRAGMA shrink_memory;")
# Garbage collection
gc()
}
# Global database connection object
dbCon <- connectToDatabase("sakila.db")
ensureDatabaseConnection(dbCon)
clearDatabaseCache(dbCon)
# Removes the given user defined index
# @param indexName: Name of the index to remove
queryToRemoveUserDefinedIndexes <- function(indexName) {
return (sprintf("DROP INDEX IF EXISTS %s", indexName))
}
# Gets all user defined indexes
# @param dbCon: Database connection object
getAllUserDefinedIndexes <- function(dbCon) {
return (dbGetQuery(dbCon, "SELECT name FROM sqlite_master WHERE type='index'"))
}
# Removes all user defined indexes
# @param dbCon: Database connection object
removeUserDefinedIndexes <- function(dbCon) {
indexes <- getAllUserDefinedIndexes(dbCon)
for (index in indexes$name) {
# Ignoring auto generated indexes
if (!grepl("sqlite_autoindex", index)) {
dbExecute(dbCon, queryToRemoveUserDefinedIndexes(index))
}
}
}
# Query to get the film count per category
queryToGetFilmCountPerCategory <- function() {
return (
"SELECT C.name as category_name, count(FC.film_id) as film_count
FROM film_category as FC
JOIN category as C ON FC.category_id = C.category_id
GROUP BY C.name
"
)
}
# Gets the film count per category
# @param dbCon: Database connection object
getFilmCountPerCategory <- function(dbCon) {
result <- dbGetQuery(dbCon, queryToGetFilmCountPerCategory())
# Formatting the film count to have a readable format
result$film_count <- format(result$film_count,
scientific = FALSE,
big.mark = ",")
return (result)
}
# Displays information on Zorro Ark film
# @param result: Result of the query
displayInformationOnFilm <- function(result) {
print(result,row.names = FALSE)
}
# Displays the film count per category
# @param dbCon: Database connection object
displayFilmCountPerCategory <- function(dbCon) {
result <- getFilmCountPerCategory(dbCon)
displayInformationOnFilm(result)
}
removeUserDefinedIndexes(dbCon)
displayFilmCountPerCategory(dbCon)
# Gives the query plan for the given query
# @param dbCon: Database connection object
# @param query: Query for which the plan is required
getQueryPlan <- function(dbCon,query){
return(dbGetQuery(dbCon, sprintf("EXPLAIN QUERY PLAN %s", query)))
}
# Displays the query plan for the given query
# Displays only the detail, other information can be added is required
# @param dbCon: Database connection object
# @param query: Query for which the plan is required
displayQueryPlan <- function(dbCon,query){
result <- getQueryPlan(dbCon,query)
print(result$detail)
}
displayQueryPlan(dbCon,queryToGetFilmCountPerCategory())
# Query to get title,length, rental_rate, release_year of Zorro Ark film
queryToGetInformationOnZorroArk <- function() {
return (
"SELECT  title,length,rental_rate,release_year FROM film
where title = 'ZORRO ARK'")
}
getInformationOnZorroArk <- function(dbCon) {
return (dbGetQuery(dbCon, queryToGetInformationOnZorroArk()))
}
queryStartTime <- Sys.time()
informationOnZorroArk <- getInformationOnZorroArk(dbCon)
queryEndTime <- Sys.time()
# in milliseconds
timeToFetchInformationOnZorroArk <- round(((queryEndTime - queryStartTime)*1000),3)
displayInformationOnFilm(informationOnZorroArk)
# display query plan on information of Zorro Ark
displayQueryPlan(dbCon,queryToGetInformationOnZorroArk())
# Query to create index on title column
queryToCreateIndexOnTitle <- function() {
return ("CREATE INDEX IF NOT EXISTS TitleIndex
ON film (title);")
}
createIndexOnTitle <- function(dbCon) {
invisible(dbExecute(dbCon, queryToCreateIndexOnTitle()))
}
createIndexOnTitle(dbCon)
startTime <- Sys.time()
informationOnZorroArk <- getInformationOnZorroArk(dbCon)
endTime <- Sys.time()
# in milliseconds
timeToFetchInformationOnZorroArkAfterIndex <- round(((endTime - startTime)*1000),3)
displayInformationOnFilm(informationOnZorroArk)
displayQueryPlan(dbCon,queryToGetInformationOnZorroArk())
# Query to get information on films having title with gold
queryToGetInformationWithFilmTitleHavingGold <- function() {
return (
"SELECT
title,
length,
rental_rate,
release_year
FROM film
WHERE LOWER(title) LIKE '%gold%';")
}
# Displays information on films having title with gold
# @param dbCon: Database connection object
displayInformationWithFilmTitleHavingGold <- function(dbCon) {
result <- dbGetQuery(dbCon, queryToGetInformationWithFilmTitleHavingGold())
displayInformationOnFilm(result)
}
displayInformationWithFilmTitleHavingGold(dbCon)
# Display query plan on information of films having title with gold
displayQueryPlan(dbCon,queryToGetInformationWithFilmTitleHavingGold())
# Disconnects from the database
# referredFrom: http://artificium.us/lessons/06.r/l-6-301-sqlite-from-r/l-6-301.html#Disconnect_from_Database
dbDisconnect(dbCon)
# Cleans the environment before beginning the execution
# referredFrom:https://northeastern.instructure.com/courses/192346/assignments/2351524
rm(list = ls())
# Install program required packages
# Installs RSQLite, DBI  packages
# referredFrom: http://artificium.us/lessons/06.r/l-6-104-r4progs/l-6-104.html#Install_Packages_on_Demand
installRequiredPackages <- function() {
packages <- c("RSQLite", "DBI", "testthat")
# Install packages that are not installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
}
# Loads the required packages to the environment
# Loads RSQLite, DBI packages
loadRequiredPackages <- function() {
suppressMessages({
library(RSQLite)
library(DBI)
library(testthat)
})
}
installRequiredPackages()
loadRequiredPackages()
# Connects to the database
# referredFrom: http://artificium.us/lessons/06.r/l-6-301-sqlite-from-r/l-6-301.html#Connect_to_Database
# @param dbName: Name of the database to connect to
connectToDatabase <- function(dbName) {
return (dbConnect(RSQLite::SQLite(), dbname = dbName))
}
# Ensures the database connection is established
# by running a test query and asserting on the result.
# @param dbCon: Database connection object
ensureDatabaseConnection <- function(dbCon) {
result <- dbGetQuery(dbCon, "SELECT * FROM film LIMIT 1")
test_that("Result size is 1", {
expect_equal(nrow(result), 1)
})
}
# Function to clear databse cache to checking working of indexes
# @param dbCon: Database connection object
clearDatabaseCache <- function(dbCon) {
# Free up cache memory in SQLite
# referredFrom: https://stackoverflow.com/questions/4123196/sqlite-abnormal-memory-usage
dbExecute(dbCon, "PRAGMA shrink_memory;")
# Garbage collection
gc()
}
# Global database connection object
dbCon <- connectToDatabase("sakila.db")
ensureDatabaseConnection(dbCon)
# Removes the given user defined index
# @param indexName: Name of the index to remove
queryToRemoveUserDefinedIndexes <- function(indexName) {
return (sprintf("DROP INDEX IF EXISTS %s", indexName))
}
# Gets all user defined indexes
# @param dbCon: Database connection object
getAllUserDefinedIndexes <- function(dbCon) {
return (dbGetQuery(dbCon, "SELECT name FROM sqlite_master WHERE type='index'"))
}
# Removes all user defined indexes
# @param dbCon: Database connection object
removeUserDefinedIndexes <- function(dbCon) {
indexes <- getAllUserDefinedIndexes(dbCon)
for (index in indexes$name) {
# Ignoring auto generated indexes
if (!grepl("sqlite_autoindex", index)) {
dbExecute(dbCon, queryToRemoveUserDefinedIndexes(index))
}
}
}
# Query to get the film count per category
queryToGetFilmCountPerCategory <- function() {
return (
"SELECT C.name as category_name, count(FC.film_id) as film_count
FROM film_category as FC
JOIN category as C ON FC.category_id = C.category_id
GROUP BY C.name
"
)
}
# Gets the film count per category
# @param dbCon: Database connection object
getFilmCountPerCategory <- function(dbCon) {
result <- dbGetQuery(dbCon, queryToGetFilmCountPerCategory())
# Formatting the film count to have a readable format
result$film_count <- format(result$film_count,
scientific = FALSE,
big.mark = ",")
return (result)
}
# Displays information on Zorro Ark film
# @param result: Result of the query
displayInformationOnFilm <- function(result) {
print(result,row.names = FALSE)
}
# Displays the film count per category
# @param dbCon: Database connection object
displayFilmCountPerCategory <- function(dbCon) {
result <- getFilmCountPerCategory(dbCon)
displayInformationOnFilm(result)
}
removeUserDefinedIndexes(dbCon)
displayFilmCountPerCategory(dbCon)
# Gives the query plan for the given query
# @param dbCon: Database connection object
# @param query: Query for which the plan is required
getQueryPlan <- function(dbCon,query){
return(dbGetQuery(dbCon, sprintf("EXPLAIN QUERY PLAN %s", query)))
}
# Displays the query plan for the given query
# Displays only the detail, other information can be added is required
# @param dbCon: Database connection object
# @param query: Query for which the plan is required
displayQueryPlan <- function(dbCon,query){
result <- getQueryPlan(dbCon,query)
print(result$detail)
}
displayQueryPlan(dbCon,queryToGetFilmCountPerCategory())
# Query to get title,length, rental_rate, release_year of Zorro Ark film
queryToGetInformationOnZorroArk <- function() {
return (
"SELECT  title,length,rental_rate,release_year FROM film
where title = 'ZORRO ARK'")
}
getInformationOnZorroArk <- function(dbCon) {
return (dbGetQuery(dbCon, queryToGetInformationOnZorroArk()))
}
queryStartTime <- Sys.time()
informationOnZorroArk <- getInformationOnZorroArk(dbCon)
queryEndTime <- Sys.time()
# in milliseconds
timeToFetchInformationOnZorroArk <- round(((queryEndTime - queryStartTime)*1000),3)
displayInformationOnFilm(informationOnZorroArk)
# display query plan on information of Zorro Ark
displayQueryPlan(dbCon,queryToGetInformationOnZorroArk())
# Query to create index on title column
queryToCreateIndexOnTitle <- function() {
return ("CREATE INDEX IF NOT EXISTS TitleIndex
ON film (title);")
}
createIndexOnTitle <- function(dbCon) {
invisible(dbExecute(dbCon, queryToCreateIndexOnTitle()))
}
createIndexOnTitle(dbCon)
startTime <- Sys.time()
informationOnZorroArk <- getInformationOnZorroArk(dbCon)
endTime <- Sys.time()
# in milliseconds
timeToFetchInformationOnZorroArkAfterIndex <- round(((endTime - startTime)*1000),3)
displayInformationOnFilm(informationOnZorroArk)
displayQueryPlan(dbCon,queryToGetInformationOnZorroArk())
# Query to get information on films having title with gold
queryToGetInformationWithFilmTitleHavingGold <- function() {
return (
"SELECT
title,
length,
rental_rate,
release_year
FROM film
WHERE LOWER(title) LIKE '%gold%';")
}
# Displays information on films having title with gold
# @param dbCon: Database connection object
displayInformationWithFilmTitleHavingGold <- function(dbCon) {
result <- dbGetQuery(dbCon, queryToGetInformationWithFilmTitleHavingGold())
displayInformationOnFilm(result)
}
displayInformationWithFilmTitleHavingGold(dbCon)
# Display query plan on information of films having title with gold
displayQueryPlan(dbCon,queryToGetInformationWithFilmTitleHavingGold())
# Disconnects from the database
# referredFrom: http://artificium.us/lessons/06.r/l-6-301-sqlite-from-r/l-6-301.html#Disconnect_from_Database
dbDisconnect(dbCon)
